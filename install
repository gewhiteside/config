#!/bin/bash
#
# Installs config files and some scripts and configures git for this
# repo. Should be run from the project root.
#
# Usage: install [OPTION]...
#
# Options are passed directly to ln (see man ln). Some usefull options are
# --force and --interactive.

config=$PWD

## Dotfiles
# Symlink dotfiles to home directory, adding a leading dot.
for dotfile in $config/dotfiles/*[!~]; do
    ln -s "$@" $dotfile ~/.${dotfile##*/}
done


## Emacs
# Create ~/.emacs.d and ~/.emacs.d/elisp if they don't already exist.
mkdir -p ~/.emacs.d/elisp

# Symlink emacs init file to .emacs.d.
ln -s "$@" $config/emacs.d/init.el ~/.emacs.d
# Symlink elisp files to .emacs.d/elisp.
ln -s "$@" $config/emacs.d/elisp/*[!~] ~/.emacs.d/elisp


## Scripts
# Create user bin directory.
mkdir -p ~/bin
# Symlink some scripts.
ln -s "$@" $(pwd)/bin/{config-filter,mv-ln} ~/bin


## SSH
# Create user ssh directory.
mkdir -p ~/.ssh
# Symlink the ssh config file.
ln -s "$@" $PWD/ssh/config ~/.ssh

# Don't let Xfce start {ssh,gpg}-agent on login, if this is a system with
# Xfce. NOTE: The "Launch GNOME services on startup" checkbox must be unchecked
# under the "Advanced" tab of xfce4-session-settings, otherwise Xfce will just
# start the GNOME keyring.
if type xfce4-session >/dev/null; then
    xfconf-query -c xfce4-session -p /startup/ssh-agent/enabled -n -t bool \
                 -s false
    xfconf-query -c xfce4-session -p /startup/gpg-agent/enabled -n -t bool \
                 -s false
fi

# Disable GNOME keyring components, if this is a system with GNOME.
if [ -f /etc/xdg/autostart/gnome-keyring-ssh.desktop ]; then
    # The user's local XDG autostart config files live in this directory.
    mkdir -p ~/.config/autostart

    # Copy the system's gnome-keyring config files to the user's local
    # directory and disable autostart for them.
    cp /etc/xdg/autostart/gnome-keyring-*.desktop ~/.config/autostart
    for file in ~/.config/autostart/gnome-keyring-*.desktop; do
        echo "Hidden=true" >>$file
    done
fi


# Remove irrelevant dotfiles for certain systems.
case $(uname) in
  Linux)
      rm ~/.mintty* ;;
  CYGWIN*)
      rm ~/.screenrc ;;
esac

# Create machine-specific bash init file.
touch ~/.bash_$(hostname -s)

# Create machine-specific emacs init file.
touch ~/.emacs.d/elisp/$(hostname -s).el

# Configure git for this repo.
filter_include='path = ../.gitfilters'
if ! grep -q "$filter_include" .git/config; then
    echo -e "[include]\n\t$filter_include" >>.git/config
fi
