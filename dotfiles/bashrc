# If this shell is not interactive, don't do anything.
[[ $- != *i* ]] && return

source ~/.bash_aliases
source ~/.bash_prompt
source ~/.git-completion.bash
source ~/.git-prompt.sh

# Increase the size of the  history file.
HISTFILESIZE=3000
# Don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth
# Time stamp commands in the history file.
HISTTIMEFORMAT="%F %T "
# Append to the history file, don't overwrite it.
shopt -s histappend

# Don't try to complete an empty command.
shopt -s no_empty_cmd_completion

# Support agent forwarding over multiple ssh sesssions, i.e., the Emacs daemon
# and tmux, by maintaining a symlink with a standard location to a valid agent.
is_ssh_agent_symlink_valid() (
    export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
    ssh-add -l &>/dev/null
)

set_ssh_agent_symlink() {
    [ ! "$SSH_CONNECTION" ] && return

    if [ -S "$SSH_AUTH_SOCK" ] && ! is_ssh_agent_symlink_valid; then
        ln --symbolic --force $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
    fi
}
set_ssh_agent_symlink

set_editor() {
    # If emacs isn't installed, just use vim.
    if ! type emacs &>/dev/null; then
        EDITOR=vim
        return
    fi

    # If this terminal is dumb, then use emacsclient to ship the editing off to
    # the server, as this terminal can't handle running an editor. As far as I
    # know, I only use dumb terminals inside of Emacs, so there should always be
    # a server available.
    if [ "$TERM" = "dumb" ]; then
        EDITOR=emacsclient
        return
    fi

    # Otherwise, this is a normal terminal. Set the default editor to
    # emacsclient running in this terminal. If the server isn't available, then
    # start Emacs without loading a saved destkop or a window system and don't
    # confirm killing the session.

    # NB(whiteside): Using a \ before a new line caused issues, so just use
    # += instead.
    ALTERNATE_EDITOR='emacs --no-desktop --no-window-system '
    ALTERNATE_EDITOR+='--eval "(setq confirm-kill-emacs nil)"'

    # Output stderr to /dev/null to silence warning.
    EDITOR="emacsclient --tty 2>/dev/null"
}
set_editor
export EDITOR ALTERNATE_EDITOR

# Set PAGER and GIT_PAGER for this terminal. GIT_PAGER overrides the settings of
# PAGER, core.pager, and pager.<cmd> when paging output from Git.
set_pager() {
    # If this terminal is dumb, avoid paging at all with by using cat.
    if [ "$TERM" = "dumb" ]; then
        PAGER="cat"
        GIT_PAGER="cat"
        return
    fi

    # Otherwise, this is a normal terminal and the default setting of PAGER,
    # usually less, is just fine.

    # If diff-highlight can't be found, set GIT_PAGER to core.pager to ignore
    # the settings of pager.<cmd>.
    if ! type diff-highlight &>/dev/null; then
        GIT_PAGER="$(git config --global core.pager)"
    fi
}
set_pager
export PAGER GIT_PAGER

# Add a project-specific symlink in <project_root>/.symlinks.
project_symlink() {
    if [ -z "$PROJECT" ]; then
        echo "error: set PROJECT before calling ${FUNCNAME[0]}"
        return 1
    fi

    mkdir -p $project_root/.symlinks

    local target="$(realpath $1)"
    local link_name=
    if [ "$2" ]; then
        link_name="$2"
    else
        link_name="${target##*/}"
    fi
    ln -T -f -s "$target" "$project_root/.symlinks/$link_name"
}

# If PROJECT is empty, just use the builtin cd. If PROJECT is not empty, with no
# arguments, cd to the project root. Otherwise, cd without following symlinks
# and without standard output.
cd() {
    if [ -z "$PROJECT" ]; then
        command cd "$@"
        return
    fi

    if [ "$#" -eq 0 ]; then
        command cd "${PROJECT#*:}"
    else
        command cd -P "$@" >/dev/null
    fi
}

# NB(whiteside): Reservoir environment setup depends on functions defined in
# this file, so source it last.
[ -f ~/reservoir/bash/bash_reservoir ] && source ~/reservoir/bash/bash_reservoir
